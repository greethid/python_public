import sys
from time import sleep

import pygame

from random import randint
from settings import Settings
from ship import Ship
from bullet import Bullet
from alien import Alien
from star import Star
from game_stats import GameStats
from button import Button
from scoreboard import Scoreboard


class AlienInvasion:
    """General class dedicated to managing the resources and the way the game works."""

    def __init__(self):
        """Initialize game and create resources."""

        pygame.init()
        self.settings = Settings()

        self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
        self.settings.screen_width = self.screen.get_rect().width
        self.settings.screen_height = self.screen.get_rect().height
        pygame.display.set_caption("Alien Invasion")

        # Create an object that stores statistical data about a game
        self.stats = GameStats(self)
        self.sb = Scoreboard(self)

        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()
        self.stars = pygame.sprite.Group()

        self._create_fleet()
        self._create_stars_background()

        # Create the button 'Start Game'
        self.play_button = Button(self, self.screen, 'Start Game')

        # Create the difficulty buttons
        self.easy_button = Button(self, self.screen, 'Easy', -50)
        self.normal_button = Button(self, self.screen, 'Normal')
        self.hard_button = Button(self, self.screen, 'Hard', 50)
        self.easy_button.button_active = False
        self.normal_button.button_active = False
        self.hard_button.button_active = False

    def run_game(self):
        """Start main loop of the program"""

        while True:
            self._check_events()

            if self.stats.game_active:
                self.ship.update()
                self._update_bullets()
                self._update_aliens()
                self._update_stars()

            self._update_screen()

    def _check_events(self):
        """Reaction for events generated by keyboard and mouse"""
        # Waiting for input from a user
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_pop = pygame.mouse.get_pos()
                self._check_play_button(self.mouse_pop)
                self._check_difficulty_button(self.mouse_pop)
            elif event.type == pygame.KEYDOWN:
                self._check_keydown_events(event)
            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)

    def _check_play_button(self, mouse_pos):
        """Start a new game after clicking 'Start Game' button by mouse and proceed to choose difficulty"""
        button_clicked = self.play_button.rect.collidepoint(mouse_pos)

        if button_clicked and not self.stats.game_active and self.play_button.button_active:
            self.play_button.button_active = False
            self.easy_button.button_active = True
            self.normal_button.button_active = True
            self.hard_button.button_active = True
            self.mouse_pop = (0, 0)
            self.sb.prep_score()
            self.sb.prep_level()

    def _check_difficulty_button(self, mouse_pos):
        """Start a new game after clicking any difficulty button by mouse"""
        easy_button_clicked = self.easy_button.rect.collidepoint(mouse_pos)
        normal_button_clicked = self.normal_button.rect.collidepoint(mouse_pos)
        hard_button_clicked = self.hard_button.rect.collidepoint(mouse_pos)

        if easy_button_clicked and not self.stats.game_active and self.easy_button.button_active:
            self.settings.initialize_dynamic_settings('easy')
            self.stats.difficulty = 'easy'
            self._start_new_game_and_reset_buttons()
        elif normal_button_clicked and not self.stats.game_active and self.normal_button.button_active:
            self.settings.initialize_dynamic_settings('normal')
            self.stats.difficulty = 'normal'
            self._start_new_game_and_reset_buttons()
        elif hard_button_clicked and not self.stats.game_active and self.hard_button.button_active:
            self.settings.initialize_dynamic_settings('hard')
            self.stats.difficulty = 'hard'
            self._start_new_game_and_reset_buttons()

    def _start_new_game_and_reset_buttons(self):
        """Start a new game after choosing a difficulty"""
        self._start_new_game()
        self.play_button.button_active = True
        self.easy_button.button_active = False
        self.normal_button.button_active = False
        self.hard_button.button_active = False

    def _check_keydown_events(self, event):
        """Reaction to pressing a key"""
        if event.key == pygame.K_RIGHT:
            # Moving the ship to the right side
            self.ship.moving_right = True
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = True
        elif event.key == pygame.K_UP:
            self.ship.moving_up = True
        elif event.key == pygame.K_DOWN:
            self.ship.moving_down = True
        elif event.key == pygame.K_q:
            sys.exit()
        elif event.key == pygame.K_SPACE:
            self._fire_bullet()

        elif event.key == pygame.K_g and not self.stats.game_active:
            self._start_new_game()

    def _start_new_game(self):
        """Start a new game after clicking 'Start Game' button by a mouse or the 'G' key on a keyboard"""
        # Resetting game statistics
        self.stats.reset_stats()
        self.stats.game_active = True
        self.sb.prep_score()
        self.sb.prep_level()

        # Delete content of the list aliens and bullets
        self.aliens.empty()
        self.bullets.empty()

        # Create a new fleet and centre the ship
        self._create_fleet()
        self.ship.center_ship()

        # Hide mouse cursor
        pygame.mouse.set_visible(False)

    def _check_keyup_events(self, event):
        """Reaction to releasing a key"""
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = False
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = False
        elif event.key == pygame.K_UP:
            self.ship.moving_up = False
        elif event.key == pygame.K_DOWN:
            self.ship.moving_down = False

    def _create_fleet(self):
        """Creation of a complete alien fleet"""
        # Create an alien and determine how many aliens will fit in a row
        # Distance between aliens is equal to the width of an alien
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        available_space_x = self.settings.screen_width - (6 * alien_width)
        number_aliens_x = available_space_x // (2 * alien_width)

        # Determine how many rows will fit on the screen
        ship_height = self.ship.rect.height
        available_space_y = (self.settings.screen_height - (5 * alien_height) - ship_height)
        number_rows = available_space_y // (2 * alien_height)

        # Create the full fleet of alien
        for row_number in range(number_rows):
            for alien_number in range(number_aliens_x):
                self._create_alien(alien_number, row_number)

    def _create_alien(self, alien_number, row_number):
        """Creation of on alien and place it in a row"""
        alien = Alien(self)
        alien_width = alien.rect.width
        alien.x = alien_width + 2 * alien_width * alien_number
        alien.rect.x = alien.x
        alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
        self.aliens.add(alien)

    def _check_fleet_edges(self):
        """Reaction when alien touches the right or the left edge of the screen"""
        for alien in self.aliens.sprites():
            if alien.check_edges_right_left():
                self._change_fleet_direction()
                break

    def _change_fleet_direction(self):
        """Move the all fleet down and change direction from right to left or vice versa"""
        for alien in self.aliens.sprites():
            alien.rect.y += self.settings.fleet_drop_speed
        self.settings.fleet_direction *= -1

    def _create_stars_background(self):
        """Creation of a complete star fleet"""
        # Create an star and determine how many stars will fit in a row
        star = Star(self)
        star_width, star_height = star.rect.size
        available_space_x = self.settings.screen_width
        number_stars_x = available_space_x // (2 * star_width)

        # Determine how many rows will fit on the screen
        ship_height = self.ship.rect.height
        available_space_y = self.settings.screen_height
        number_rows = available_space_y // (2 * star_height) + 1

        # Create the full set of stars
        for row_number in range(number_rows):
            self.x_temp = 0
            self.y_rand = randint(0, 10)
            for star_number in range(number_stars_x):
                self._create_star(star_number, row_number)

    def _create_star(self, star_number, row_number):
        """Creation of on star and place it in a row"""
        star = Star(self)
        star_width = star.rect.width
        star.x = randint(0, 400) + self.x_temp  # + 2 * star_width * star_number
        self.x_temp = star.x
        star.rect.x = star.x
        star.y = 2 * star.rect.height * row_number + self.y_rand
        star.rect.y = star.y
        self.stars.add(star)

    def _check_star_edge(self):
        """Reaction when alien touches the right or the left edge of the screen"""
        for star in self.stars.sprites():
            if star.check_edge_bottom():
                star.y = 1

    def _fire_bullet(self):
        """Creating new bullet and adding it to bullets group"""
        if len(self.bullets) < self.settings.bullet_allowed:
            new_bullet = Bullet(self)
            self.bullets.add(new_bullet)

    def _update_bullets(self):
        """Updating position of the bullets and deleting these invisible on the screen"""
        # Update position of the bullets
        self.bullets.update()

        # Delete bullets outside screen
        for bullet in self.bullets.copy():
            if bullet.rect.bottom <= 0:
                self.bullets.remove(bullet)

        self._check_bullet_alien_collisions()

    def _check_bullet_alien_collisions(self):
        """Check if a bullet hit an alien - if so delete a bullet and an alien"""
        collisions = pygame.sprite.groupcollide(self.bullets, self.aliens, True, True)

        if collisions:
            for aliens in collisions.values():
                self.stats.score += self.settings.alien_points * len(aliens)
            self.sb.prep_score()
            self.sb.check_high_score()

        if not self.aliens:
            # Delete existing bullets and create a new fleet
            self.bullets.empty()
            self._create_fleet()
            self.settings.increase_speed()

            # Increment a number of level
            self.stats.level += 1
            self.sb.prep_level()

    def _update_aliens(self):
        """Check if any alien from the fleet touches the edge of the screen and update position of all aliens in the screen"""
        self._check_fleet_edges()
        self.aliens.update()

        # Detect collision between an alien and the ship
        if pygame.sprite.spritecollideany(self.ship, self.aliens):
            self._ship_hit()

        # Detect aliens which reach the bottom edge of the screen
        self._check_aliens_bottom()

    def _update_stars(self):
        """Check if any star touches the bottom edge of the screen and update position of all stars in the screen"""
        self._check_star_edge()
        self.stars.update()

    def _update_screen(self):
        """updating the images on the screen and going to a new screen"""
        # Refresh screen after each iteration of the loop
        self.screen.fill(self.settings.bg_color)
        self.stars.draw(self.screen)
        self.ship.blitme()

        for bullet in self.bullets.sprites():
            bullet.draw_bullet()

        self.aliens.draw(self.screen)

        # Display scoring information
        self.sb.show_score()

        # Display the button 'Start Game' only when the game is inactive
        if not self.stats.game_active:
            if self.play_button.button_active:
                self.play_button.draw_button()
            if self.easy_button.button_active:
                self.easy_button.draw_button()
            if self.normal_button.button_active:
                self.normal_button.draw_button()
            if self.hard_button.button_active:
                self.hard_button.draw_button()


        # Displaying the last modified screen
        pygame.display.flip()

    def _ship_hit(self):
        """Reaction for collision between the ship and the alien"""
        if self.stats.ship_left > 1:
            # Decrease value of left ships
            self.stats.ship_left -= 1

            # Delete content of lists alien and bullets
            self.aliens.empty()
            self.bullets.empty()

            # Create a new fleet and center the ship
            self._create_fleet()
            self.ship.center_ship()

            # Pause
            sleep(0.5)

        else:
            self.stats.game_active = False
            pygame.mouse.set_visible(True)

    def _check_aliens_bottom(self):
        """Check if any alien reaches the bottom edge of the screen"""
        screen_rect = self.screen.get_rect()
        for alien in self.aliens.sprites():
            if alien.rect.bottom >= screen_rect.bottom:
                # Do the same as in case collision between the ship and an alien
                self._ship_hit()
                break


if __name__ == '__main__':
    # Creating a copy of the game and launching it
    ai = AlienInvasion()
    ai.run_game()
